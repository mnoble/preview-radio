class PreviewRadio::AlbumPlayer
  def constructor:album
    @songs      = []
    @player     = ($ find:"audio")
    @control    = ($ find:"#menu #control")
    @album_view = (PreviewRadio::AlbumView new:)

    (this start:album)
    (this bind:)
    (this update:)

    (@player[0] load:)
    (@player[0] play:)
  end

  def start:album
    songs = (this order_by_track_number:(album songs))

    (this fetch_next:album)
    (@album_view set_album:album)
    (@album_view render:)

    @player[0].volume = 0

  def order_by_track_number:album
    (@songs sort) { a b | a.track_number > b.track_number }

  def bind
    (@player  on:"ended", (this ended))
    (@player  on:"timeupdate", (this timeupdate))
    (@control on:"click", (this toggle))

  def ended
    @player[0].volume = 0
    (this update:)
    (@player[0] pause:)
    (@player load:)
    (@player play:)

  def timeupdate
    if (@player[0] currentTime) < 2.0
      (this fadein:)
    else if (@player[0] duration) - (@player[0] currentTime) < 2.0
      (this fadeout:)
    else
      @player.volume = 1.0

    (@album_view set_progress:((this currentTime) / (this duration)) * 100)

  def fadein
    @player[0].volume = (@player[0] currentTime) / 2.0

  def fadeout
    @player[0].volume = ((@player[0] duration) - (@player[0] currentTime)) / 2.0

  def toggle
    if (@control hasClass:"stop")
      (@player[0] pause:)
      (@control removeClass:"stop")
    else
      (@player[0] play:)
      (@control addClass:"stop")

  def update
    if (@songs length) == 0
      (this start:@next_album)

    (this set_active_song:(@songs shift:))

  def fetch_next:_album
    ($ getJSON:"/previews/#{(_album id)}/next") { album | (this set_next_album:album) }

  def set_next_album:album
    @next_album = album

  def set_active_song:song
    ((@player find:"source") attr:"src", (song preview_url))
    (@album_view set_active_song:song)

